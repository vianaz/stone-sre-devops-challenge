name: CD Pipeline

on:
  workflow_call:
    inputs:
      docker_registry:
        required: true
        description: "The Docker registry to push the image to"
        type: string
      image_name:
        required: true
        description: "The name of the Docker image"
        type: string
      image_name_with_tag:
        required: true
        description: "The name of the image to push"
        type: string
      artifact_name:
        required: true
        description: "The name of the artifact to download"
        type: string
      environment:
        required: true
        description: "The environment to deploy the application to"
        type: string
      url:
        required: true
        description: "The URL of the environment"
        type: string

jobs:
  publish-image:
    uses: ./.github/workflows/push-and-sign.yaml
    with:
      image_name_with_tag: ${{ inputs.image_name_with_tag }}
      artifact_name: ${{ inputs.artifact_name }}
      docker_registry: ${{ inputs.docker_registry }}
      image_name: ${{ inputs.image_name }}

  deploy:
    runs-on: ubuntu-latest
    needs: [publish-image]
    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.url }}
    permissions:
      id-token: write
      contents: read
      actions: read
    steps:
      - uses: actions/checkout@v4
      - uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.K8S_CLUSTER_ID }}

      - uses: azure/setup-helm@v4.2.0
        id: install

      - name: Install Helm chart
      # with:
        #   exec: |
        #     helm upgrade stone-sre-devops-challenge .devops/helm --install --namespace ${{ github.event.pusher.username }}  --set container.tag=main --set container.pullPolicy=Always --set env.DB_PASSWORD=${{ secrets.DB_PASSWORD }} --set env.DB_DATABASE=${{ secrets.DB_USER }} --set env.DB_USER=${{ secrets.DB_USER }} --set env.DB_PORT=${{ vars.DB_PORT }} --set env.DB_HOST=${{ vars.DB_HOST }} --set env.NODE_ENV="production" --set env.APP_KEY=${{ secrets.APP_KEY }} --set env.LOG_LEVEL="debug"
        run: |
          helm
