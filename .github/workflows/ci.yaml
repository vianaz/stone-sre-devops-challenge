name: CI Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: 20.11.1

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Lint code
        run: pnpm lint:report
        continue-on-error: true

      - name: Annotate Code Linting Results
        uses: ataylorme/eslint-annotate-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          report-json: "lint-results.json"
          check-name: "lint"
          fail-on-warning: false
          fail-on-error: true

  build:
    needs: lint
    runs-on: ubuntu-latest
    outputs:
      image_name_with_tag: ${{ steps.meta.outputs.tags }}
      artifact_name: ${{ env.ARTIFACT_NAME }}
    env:
      DOCKER_FILE: .devops/docker/Dockerfile
      ARTIFACT_NAME: stone-sre-devops-challenge-${{ github.sha }}

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and export
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ env.DOCKER_FILE }}

          cache-from: type=gha
          cache-to: type=gha,mode=max

          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

          outputs: type=docker,dest=/tmp/${{ env.ARTIFACT_NAME }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: /tmp/${{ env.ARTIFACT_NAME }}.tar
          retention-days: 3

  tests:
    runs-on: ubuntu-latest
    needs: [build, lint]
    env:
      TZ: UTC
      PORT: 3000
      HOST: 0.0.0.0
      LOG_LEVEL: debug
      NODE_ENV: test
      APP_KEY: H5TfJkzRDwDw_Hj5-FRu6hZJRXszYT8J
      DB_HOST: 127.0.0.1
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: stone-sre-devops-challange-password
      DB_DATABASE: postgres
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: ${{ env.DB_USER }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
          POSTGRES_DB: ${{ env.DB_DATABASE }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        run: pnpm test

  image-scan:
    runs-on: ubuntu-latest
    needs: [build, lint, tests]
    env:
      ARTIFACT_NAME: ${{ needs.build.outputs.artifact_name }}
      IMAGE_NAME_WITH_TAG: ${{ needs.build.outputs.image_name_with_tag }}

    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: /tmp

      - name: Load image
        run: |
          docker load --input /tmp/${{ env.ARTIFACT_NAME }}.tar

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_NAME_WITH_TAG }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL, HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  push-and-sign-image:
    runs-on: ubuntu-latest
    needs: [image-scan, build, lint, tests]
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write
    env:
      ARTIFACT_NAME: ${{ needs.build.outputs.artifact_name }}
      IMAGE_NAME_WITH_TAG: ${{ needs.build.outputs.image_name_with_tag }}

    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: /tmp

      - name: Load image
        run: |
          docker load --input /tmp/${{ env.ARTIFACT_NAME }}.tar

      - name: Push image to GitHub Container Registry
        id: push
        run: |
          docker push ${{ env.IMAGE_NAME_WITH_TAG }}
          digest=$(docker image inspect ${{ env.IMAGE_NAME_WITH_TAG }} --format '{{index .RepoDigests 0}}' | cut -d'@' -f2)
          echo "digest=$digest" >> "$GITHUB_OUTPUT"

      - name: Attest
        uses: actions/attest-build-provenance@v1
        id: attest
        with:
          subject-name: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true


  deploy-production:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # needs: [push-and-sign-image, build, deploy-staging]
    needs: [push-and-sign-image, build]
    environment:
      name: production
      # url: ${{ vars.APP_URL }}
    env:
      KUSTOMIZE_PATH: .devops/k8s/base
    permissions:
      id-token: write
      contents: read
      actions: read
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: ${{ github.actor }}
          aws-region: us-east-1


      - name: Patch .env
        run: |
          sed -i "s/LOG_LEVEL=.*/LOG_LEVEL=info/g" ${{ env.KUSTOMIZE_PATH }}/.env
          sed -i "s/APP_KEY=.*/APP_KEY=${{ secrets.APP_KEY }}/g" ${{ env.KUSTOMIZE_PATH }}/.env
          sed -i "s/NODE_ENV=.*/NODE_ENV=production/g" ${{ env.KUSTOMIZE_PATH }}/.env
          sed -i "s/DB_HOST=.*/DB_HOST=${{ secrets.DB_HOST }}/g" ${{ env.KUSTOMIZE_PATH }}/.env
          sed -i "s/DB_PORT=.*/DB_PORT=${{ vars.DB_PORT }}/g" ${{ env.KUSTOMIZE_PATH }}/.env
          sed -i "s/DB_USER=.*/DB_USER=${{ secrets.DB_USER }}/g" ${{ env.KUSTOMIZE_PATH }}/.env
          sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=${{ secrets.DB_PASSWORD }}/g" ${{ env.KUSTOMIZE_PATH }}/.env
          sed -i "s/DB_DATABASE=.*/DB_DATABASE=${{ secrets.DB_DATABASE }}/g" ${{ env.KUSTOMIZE_PATH }}/.env
      
      - name: Update Kubernetes resources
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}
          kubectl apply -k ${{ env.KUSTOMIZE_PATH }}
      
  # deploy-production:
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   # needs: [push-and-sign-image, build, deploy-staging]
  #   needs: [push-and-sign-image, build]
  #   environment:
  #     name: production
  #     url: ${{ vars.APP_URL }}
  #   env:
  #     KUSTOMIZE_PATH: .devops/k8s/base
  #   permissions:
  #     id-token: write
  #     contents: read
  #     actions: read
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: digitalocean/action-doctl@v2
  #       with:
  #         token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

  #     - name: Save DigitalOcean kubeconfig
  #       run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.K8S_CLUSTER_ID }}

  #     - name: Copy .env.example to .env
  #       run: cp .env.example ${{ env.KUSTOMIZE_PATH }}/.env

  

  #     - name: Deploy to Kubernetes
  #       working-directory: ${{ env.KUSTOMIZE_PATH }}
  #       run: kubectl apply -k .
